name: TchapX-Production

schemes:
  TchapX-Production:
    analyze:
      config: Debug
    archive:
      config: Release
    build:
      targets:
        TchapX-Production:
          - running
          - testing
          - profiling
          - analyzing
          - archiving
    profile:
      config: Release
    run:
      config: Debug
      environmentVariables:
        - variable: HTTPS_PROXY
          value: localhost:9090
          isEnabled: false
        - variable: UI_TESTS_SCREEN
          value: ""
          isEnabled: false
        - variable: RESET_APP_SETTINGS
          value: "true"
          isEnabled: false
    test:
      config: Debug
      gatherCoverageData: true
      coverageTargets:
        - TchapX-Production
      testPlans:
        - path: ../UnitTests/SupportingFiles/UnitTests.xctestplan
          defaultPlan: true
        - path: ../UITests/SupportingFiles/UITests.xctestplan
          defaultPlan: false
        - path: ../PreviewTests/SupportingFiles/PreviewTests.xctestplan
          defaultPlan: false

targets:
  TchapX-Production:
    type: application
    platform: iOS

    configFiles:
      Debug: ../production/SupportingFiles/secrets.xcconfig
      Release: ../production/SupportingFiles/secrets.xcconfig

    info:
      path: ../production/SupportingFiles/Info.plist
      properties:
        UILaunchScreen:
          UIColorName: colors/background-color
        CFBundleDisplayName: $(APP_DISPLAY_NAME)
        CFBundleShortVersionString: $(MARKETING_VERSION)
        CFBundleVersion: $(CURRENT_PROJECT_VERSION)
        CFBundleURLTypes: [
          {
            CFBundleTypeRole: Editor,
            CFBundleURLName: "Element Call",
            CFBundleURLSchemes: [
              io.element.call
            ]
          },
          {
            CFBundleTypeRole: Editor,
            CFBundleURLName: "Application",
            CFBundleURLSchemes: [
              io.element
            ]
          }
        ]
        UISupportedInterfaceOrientations: [
          UIInterfaceOrientationPortrait,
          UIInterfaceOrientationPortraitUpsideDown,
          UIInterfaceOrientationLandscapeLeft,
          UIInterfaceOrientationLandscapeRight
        ]
        appGroupIdentifier: $(APP_GROUP_IDENTIFIER)
        baseBundleIdentifier: $(BASE_BUNDLE_IDENTIFIER)
        keychainAccessGroupIdentifier: $(KEYCHAIN_ACCESS_GROUP_IDENTIFIER)
        productionAppName: $(PRODUCTION_APP_NAME)
        ITSAppUsesNonExemptEncryption: false
        NSUserActivityTypes: [
          INSendMessageIntent,
          INStartCallIntent,
        ]
        NSCameraUsageDescription: To take pictures or videos and send them as a message $(APP_DISPLAY_NAME) needs access to the camera.
        NSMicrophoneUsageDescription: To record and send messages with audio, $(APP_DISPLAY_NAME) needs to access the microphone.
        NSPhotoLibraryAddUsageDescription: This lets you save images and videos to your photo library.
        NSLocationWhenInUseUsageDescription: Grant location access so that $(APP_DISPLAY_NAME) can share your location.
        NSFaceIDUsageDescription: Face ID is used to access your app.
        UIBackgroundModes: [
          audio,
          fetch,
          processing,
          voip
        ]
        BGTaskSchedulerPermittedIdentifiers: [
          fr.gouv.tchapx.background.refresh
        ]
        UTExportedTypeDeclarations:
        - UTTypeConformsTo: [public.text]
          UTTypeDescription: Mention Pills
          UTTypeIdentifier: $(PILLS_UT_TYPE_IDENTIFIER)
        CFBundleDocumentTypes:
        - CFBundleTypeName: Mention Pills
          CFBundleTypeRole: Viewer
          LSHandlerRank: Owner
          LSItemContentTypes: $(PILLS_UT_TYPE_IDENTIFIER)
        LSSupportsOpeningDocumentsInPlace: false
        mapLibreAPIKey: $(MAPLIBRE_API_KEY)
        
        # Data generated from Tchap Android `certignaservicesrootca.cer` embedded certificate.
        # Certificate of a website can be obtained as follow: ex +'/BEGIN CERTIFICATE/,/END CERTIFICATE/p' <(echo | openssl s_client -showcerts -connect tchap.gouv.fr:443) -scq > tchap.gouv.fr.crt
        # Generate PEM: openssl x509 -inform der -in certignaservicesrootca.cer -out certignaservicesrootca.pem
        # Generate SPKI: cat certignaservicesrootca.pem | openssl x509 -inform pem -noout -outform pem -pubkey | openssl pkey -pubin -inform pem -outform der | openssl dgst -sha256 -binary | openssl enc -base64
        NSAppTransportSecurity: {
          NSPinnedDomains: {
            "gouv.fr": {
              NSIncludesSubdomains: true,
              NSPinnedCAIdentities: [
                "SPKI-SHA256-BASE64": "Vvyvg4+bOEbI6aO7K28ioVsUfckLqCSKqlIqZTEB/uE=",
                "PEM": "-----BEGIN CERTIFICATE-----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-----END CERTIFICATE-----"
              ]
            }
          }
        }

    settings:
      base:
        BASE_BUNDLE_IDENTIFIER: fr.gouv.tchapx
        BASE_APP_GROUP_IDENTIFIER: $(BASE_BUNDLE_IDENTIFIER)
        APP_GROUP_IDENTIFIER: group.$(BASE_APP_GROUP_IDENTIFIER)
        KEYCHAIN_ACCESS_GROUP_IDENTIFIER: "$(AppIdentifierPrefix)$(BASE_BUNDLE_IDENTIFIER)"
        PRODUCTION_APP_NAME: TchapX PRODUCTION
        APP_NAME: TchapX-Production
        APP_DISPLAY_NAME: TchapX # The name used in the application.

        PRODUCT_NAME: $(APP_NAME)
        PRODUCT_BUNDLE_IDENTIFIER: $(BASE_BUNDLE_IDENTIFIER)
        ASSETCATALOG_COMPILER_APPICON_NAME: TchapX-icon
        CODE_SIGN_ENTITLEMENTS: TchapX/production/SupportingFiles/tchapx.entitlements
        SWIFT_OBJC_BRIDGING_HEADER: ElementX/SupportingFiles/ElementX-Bridging-Header.h
        SWIFT_OBJC_INTERFACE_HEADER_NAME: GeneratedInterface-Swift.h
        PILLS_UT_TYPE_IDENTIFIER: $(BASE_BUNDLE_IDENTIFIER).pills
        OTHER_SWIFT_FLAGS:
        - "-DIS_MAIN_APP -DIS_TCHAP_PRODUCTION"

    preBuildScripts:
    - name: 🛠 SwiftGen
      runOnlyWhenInstalling: false
      basedOnDependencyAnalysis: false
      shell: /bin/sh
      script: |
        export PATH="$PATH:/opt/homebrew/bin"
        if which swiftgen >/dev/null; then
            swiftgen config run --config Tools/SwiftGen/swiftgen-config.yml
            swiftgen config run --config Tools/SwiftGen/swiftgen-config-tchap.yml
        else
            echo "warning: SwiftGen not installed, download from https://github.com/SwiftGen/SwiftGen"
        fi
    - name: 🧙 Sourcery - Generate mocks
      runOnlyWhenInstalling: false
      basedOnDependencyAnalysis: false
      shell: /bin/sh
      script: |
        export PATH="$PATH:/opt/homebrew/bin"
        if which sourcery >/dev/null; then
            sourcery --config Tools/Sourcery/AutoMockableConfig.yml
        else
            echo "warning: Sourcery not installed, run swift run tools setup-project"
        fi

    postBuildScripts:
    - name: ⚠️ SwiftLint
      runOnlyWhenInstalling: false
      basedOnDependencyAnalysis: false
      shell: /bin/sh
      script: |
        export PATH="$PATH:/opt/homebrew/bin"
        if which swiftlint >/dev/null; then
            swiftlint
        else
            echo "warning: SwiftLint not installed, download from https://github.com/realm/SwiftLint"
        fi
    - name: 🧹 SwiftFormat
      runOnlyWhenInstalling: false
      basedOnDependencyAnalysis: false
      shell: /bin/sh
      script: |
        export PATH="$PATH:/opt/homebrew/bin"
        if which swiftformat >/dev/null; then
            swiftformat --lint --lenient "$PROJECT_DIR"
        else
            echo "warning: SwiftFormat not installed, download from https://github.com/nicklockwood/SwiftFormat"
        fi

    dependencies:
    - target: TchapX-Production-NSE
    - target: TchapX-Production-ShareExtension
    # not used yet
    # - target: NCE
    - package: MatrixRustSDK
      embed: true
    - package: Compound
    - package: Algorithms
    - package: AnalyticsEvents
    - package: Collections
    - package: DeviceKit
    - package: DTCoreText
    - package: EmbeddedElementCall
    - package: KeychainAccess
    - package: Kingfisher
    - package: KZFileWatchers
    - package: LoremSwiftum
    - package: LRUCache
    - package: Mapbox
    - package: PostHog
    - package: SwiftState
    - package: GZIP
    - package: Sentry
      products: 
        - Sentry
        - SentrySwiftUI
    - package: Version
    - package: Emojibase
    - package: WysiwygComposer
    - package: SwiftOGG
    - package: DSWaveformImage
      product: DSWaveformImageViews

    sources:
    - path: ../../ElementX/Sources
      excludes:
        - Other/Extensions/XCTestCase.swift
        - Other/Extensions/XCUIElement.swift
    - path: ../../Secrets/Secrets.swift
    - path: ../main/Sources
      excludes:
        - Other/Extensions/XCUIElement.swift
    - path: ../main/Resources
    - path: ../../ElementX/Resources
    - path: ../../ElementX/SupportingFiles/Settings.bundle
    - path: ../production/Resources
    - path: ../production/SupportingFiles
      excludes:
        - target.yml
        - NSE
    - path: ../../Tools/Scripts/Templates/SimpleScreenExample/ElementX